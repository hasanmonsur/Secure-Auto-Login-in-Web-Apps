@page "/registration"
@using System.ComponentModel.DataAnnotations
@using BlazorAutoLogin.Models
@using BlazorAutoLogin.Providers
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private LoginModel loginModel = new();

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; }

    private async Task HandleRegistration()
    {
        var response = await Http.PostAsJsonAsync("api/auth/register", loginModel);

        if (response.IsSuccessStatusCode)
        {
            // Properly deserialize the response
            //var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
            // Cast to your custom provider to access NotifyUserAuthentication
            if (AuthStateProvider is CustomAuthStateProvider customProvider)
            {
                //await customProvider.NotifyUserAuthentication(authResponse.Token);
                NavManager.NavigateTo("/login", forceLoad: true);
            }
            Console.WriteLine("Registration Success!");
        }
        else
        {
            Console.WriteLine("Registration failed!");
        }
    }

}